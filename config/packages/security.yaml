security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_requerant_provider:
            entity:
                class: App\Entity\Requerant
                property: email
        agent_provider:
            entity:
                class: App\Entity\Agent
                property: email
    role_hierarchy:
        ROLE_AGENT_GESTION_PERSONNEL: [ROLE_USER]
        ROLE_AGENT_REDACTEUR: [ROLE_USER]
        ROLE_AGENT_VALIDATEUR: [ROLE_USER]
        ROLE_REQUERANT: [ROLE_USER]
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        agent:
            pattern: ^/agent/
            user_checker: MonIndemnisationJustice\Security\AgentChecker
            lazy: true
            provider: agent_provider
            form_login:
                login_path: app_agent_securite_connexion
                check_path: app_agent_securite_connexion
                enable_csrf: true
                default_target_path: app_agent_redacteur_accueil
            logout:
                path: app_agent_securite_deconnexion
                target: app_agent_securite_connexion
        requerant:
            user_checker: MonIndemnisationJustice\Security\RequerantChecker
            lazy: true
            provider: app_requerant_provider
            form_login:
                login_path: app_login
                check_path: app_login
                enable_csrf: true
                default_target_path: requerant_home_index
            logout:
                path: app_logout
                # where to redirect after logout
                target: requerant_home_index
            switch_user: true


    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
      - { path: ^/agent/!(connexion), roles: ROLE_AGENT_REDACTEUR }
      - { path: ^/(requerant|sinistre), roles: ROLE_REQUERANT }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
